# -*- coding: utf-8 -*-
"""Loja de Tudo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17T-88y3sa40AgNLF-Wnw06GWsrUBlH2x
"""

pesos_itens = {
    "Kit de Perícia": 1, "Utensílio": 1, "Vestimenta": 1, "Granada de atordoamento": 1, "Granada de fumaça": 1, "Granada de fragmentação": 1,
    "Granada incendiária": 1, "Mina antipessoal": 1, "Algemas": 1, "Arpéu": 1, "Binóculos": 1, "Corda": 1, "Equipamento de sobrevivência": 2,
    "Máscara de gás": 1, "Pé de cabra": 1, "Pistola sinalizadora": 1, "Soqueira": 1, "Bandoleira": 1, "Bloqueador de sinal": 1, "Cicatrizante": 1,
    "Lanterna tática": 1, "Mochila militar": 0, "Óculos de visão térmica": 1, "Pistola de dardos": 1, "Spray de pimenta": 1, "Taser": 1,
    "Traje Hazmat": 2, "Componentes ritualísticos de (elemento)": 1, "Amarras de (elemento)": 1, "Câmera de aura paranormal": 1, "Emissor de pulsos paranormais": 1,
    "Escuta de ruídos paranormais": 1, "Scanner de manifestação paranormal de (elemento)": 1
}

# Dicionário das origens
origens = [
    "Acadêmico",
    "Agente de Saúde",
    "Amnésico",
    "Artista",
    "Atleta",
    "Chef",
    "Criminoso",
    "Cultista Arrependido",
    "Desgarrado",
    "Engenheiro",
    "Executivo",
    "Investigador",
    "Lutador",
    "Magnata",
    "Mercenário",
    "Militar",
    "Operário",
    "Policial",
    "Religioso",
    "Servidor Público",
    "Teórico da Conspiração",
    "T.I.",
    "Trabalhador Rural",
    "Trambiqueiro",
    "Universitário",
    "Vítima"
]


# Dicionário de preços dos itens amaldiçoados especiais
itens_amaldicoados_sangue = {
    2: {
        "Coração Pulsante": 500,
        "Coroa de Espinhos": 500,
        "Frasco de Vitalidade": 500,
        "Pérola de Sangue": 500,
        "Punhos Enraivecidos": 500,
        "Seringa de Transfiguração": 500
    }
}

itens_amaldicoados_morte = {
    2: {
        "Amarras Mortais": 500,
        "Casaco de Lodo": 500,
        "Coletora": 500,
        "Crânio Espiral": 600,
        "Frasco de Lodo": 500,
        "Vislumbre do Fim": 500
    }
}

itens_amaldicoados_conhecimento = {
    2: {
        "Anéis do Elo Mental": 450,
        "Lanterna Reveladora": 500,
        "Máscara das Pessoas nas Sombras": 600,
        "Munição Jurada": 300,
        "Pergaminho da Pertinácia": 500
    }
}

itens_amaldicoados_energia = {
    2: {
        "Arcabuz dos Moretti": 700,
        "Bateria Reversa": 500,
        "Peitoral de Segunda Chance": 600,
        "Relógio de Arnaldo": 700,
        "Talismã da Sorte": 500,
        "Teclado de Conexão Neural": 500,
        "Tela do Pesadelo": 500,
        "Veículo Energizado": 5000
    }
}

itens_amaldicoados_varia = {
    2: {
        "Dedo Decepado": 400,
        "Selos Paranormais": 450
    }
}

itens_amaldicoados_medo = {
    4: {
        "Jaqueta do Veríssimo": 2500
    }
}


# Dicionário de pesos dos itens amaldiçoados especiais
pesos_itens_amaldicoados = {
    "Coração Pulsante": 1, "Coroa de Espinhos": 1, "Frasco de Vitalidade": 1, "Pérola de Sangue": 1, "Punhos Enraivecidos": 1,
    "Seringa de Transfiguração": 1, "Amarras Mortais": 1, "Casaco de Lodo": 1, "Coletora": 1, "Crânio Espiral": 1, "Frasco de Lodo": 1,
    "Vislumbre do Fim": 1, "Anéis do Elo Mental": 1, "Lanterna Reveladora": 1, "Máscara das Pessoas nas Sombras": 1, "Munição Jurada": 1,
    "Pergaminho da Pertinácia": 1, "Arcabuz dos Moretti": 1, "Bateria Reversa": 1, "Peitoral de Segunda Chance": 1, "Relógio de Arnaldo": 1,
    "Talismã da Sorte": 1, "Teclado de Conexão Neural": 1, "Tela do Pesadelo": 1, "Veículo Energizado": 1, "Dedo Decepado": 1, "Selos Paranormais": 1,
    "Jaqueta do Veríssimo": 1
}


# Dicionário de preços dos itens paranormais
itens_paranormal = {
    0: {"Componentes ritualísticos de (elemento)": 50},
    2: {"Amarras de (elemento)": 150, "Câmera de aura paranormal": 230, "Emissor de pulsos paranormais": 300,
        "Escuta de ruídos paranormais": 180, "Scanner de manifestação paranormal de (elemento)": 350}
}

# Dicionário de pesos dos itens paranormais
pesos_itens_paranormal = {
    "Componentes ritualísticos de (elemento)": 1, "Amarras de (elemento)": 1, "Câmera de aura paranormal": 1,
    "Emissor de pulsos paranormais": 1, "Escuta de ruídos paranormais": 1, "Scanner de manifestação paranormal de (elemento)": 1
}

# Dicionário de preços das explosivos
explosivo = {
    0: {"Granada de atordoamento": 200, "Granada de fumaça": 150},
    1: {"Granada de fragmentação": 350, "Granada incendiária": 320, "Mina antipessoal": 250}
}

# Dicionário de pesos das explosivos
pesos_explosivo = {
    "Granada de atordoamento": 1, "Granada de fumaça": 1, "Granada de fragmentação": 1,
    "Granada de fragmentação": 1, "Granada incendiária": 1, "Mina antipessoal": 1
}

# Dicionário de preços dos itens operacionais
itens_operacionais = {
    0: {"Algemas": 100, "Arpéu": 120, "Binóculos": 80, "Corda": 90, "Equipamento de sobrevivência": 200, "Máscara de gás": 150, "Pé de cabra": 110, "Pistola sinalizadora": 100, "Soqueira": 95},
    1: {"Bandoleira": 150, "Bloqueador de sinal": 180, "Cicatrizante": 160, "Lanterna tática": 170, "Mochila militar": 100, "Óculos de visão térmica": 175, "Pistola de dardos": 155, "Spray de pimenta": 165, "Taser": 185},
    2: {"Traje Hazmat": 200}
}

# Dicionário de pesos dos itens operacionais
pesos_itens_operacionais = {
    "Algemas": 1, "Arpéu": 1, "Binóculos": 1, "Corda": 1, "Equipamento de sobrevivência": 2, "Máscara de gás": 1, "Pé de cabra": 1,
    "Pistola sinalizadora": 1, "Soqueira": 1, "Bandoleira": 1, "Bloqueador de sinal": 1, "Cicatrizante": 1, "Lanterna tática": 1, "Mochila militar": 0,
    "Óculos de visão térmica": 1, "Pistola de dardos": 1, "Spray de pimenta": 1, "Taser": 1, "Traje Hazmat": 2
    }

# Dicionário de preços das acessórios
acessorio = {
    0: {"Kit de Perícia": 200},
    1: {"Utensílio": 500, "Vestimenta": 500}
}

# Dicionário de pesos das acessórios
pesos_acessorio = {
    "Kit de Perícia": 1, "Utensílio": 1, "Vestimenta": 1
}

# Dicionário de modificações para acessórios
modificacoes_acessorio = {
    "Aprimorado": {"custo": 100, "descricao": "Aumenta um dos bônus em perícia para +5."},
    "Instrumental": {"custo": 150, "descricao": "O acessório funciona como um kit de perícia."},
    "Função Adicional": {"custo": 200, "descricao": "Concede +2 a uma perícia adicional."},
    "Discreto": {"custo": 50, "descricao": "+5 em testes de ocultar e reduz o espaço em –1."}
}

# Dicionário de preços das proteções
protecao = {
    1: {"Proteção Leve": 200, "Escudo": 150},
    2: {"Proteção Pesada": 500}
}

# Dicionário de modificações para proteções
modificacoes_protecao = {
    "AntiBombas": {"custo": 100, "descricao": "+5 em testes de resistência contra efeitos de área."},
    "Blindada": {"custo": 150, "descricao": "Aumenta RD para 5 e o espaço em +1."},
    "Reforçada": {"custo": 200, "descricao": "Aumenta a Defesa em +2 e o espaço em +1."},
    "Discreta": {"custo": 50, "descricao": "+5 em testes de ocultar e reduz o espaço em –1."}
}

# Dicionário de preços das armas corpo a corpo
armas_corpo_a_corpo = {
    0: {"Faca": 20, "Martelo": 25, "Punhal": 35, "Bastão": 60, "Machete": 45, "Lança": 70, "Cajado": 65, "Machadinha": 80, "Nunchaku": 90, "Corrente": 90},
    1: {"Espada": 200, "Florete": 170, "Machado": 160, "Maça": 150, "Acha": 130, "Gadanho": 130, "Katana": 250, "Marreta": 190, "Montante": 180, "Motoserra": 220}
}

# Dicionário de preços das armas de fogo
armas_fogo = {
    1: {"Pistola": 250, "Revólver": 250, "Fuzil de Caça": 400, "Submetralhadora": 500, "Espingarda": 450},
    2: {"Fuzil de Assalto": 600, "Metralhadora": 750},
    3: {"Fuzil de Precisão": 700, "Bazuca": 1000, "Lança-Chamas": 1200}
}

# Dicionário de preços das armas de disparo
armas_disparo = {
    0: {"Arco": 150, "Besta": 200},
    1: {"Arco Composto": 300, "Balestra": 325}
}

# Dicionário de pesos das armas
pesos_armas = {
    "Faca": 1, "Martelo": 1, "Punhal": 1, "Bastão": 1, "Machete": 1, "Lança": 1, "Cajado": 2, "Machadinha": 1, "Nunchaku": 1, "Corrente": 1,
    "Espada": 1, "Florete": 1, "Machado": 1, "Maça": 1, "Acha": 2, "Gadanho": 2, "Katana": 2, "Marreta": 2, "Montante": 2, "Motoserra": 2,
    "Pistola": 1, "Revólver": 1, "Fuzil de Caça": 2, "Submetralhadora": 1, "Espingarda": 2, "Fuzil de Assalto": 2, "Metralhadora": 2, "Fuzil de Precisão": 2,
    "Bazuca": 2, "Lança-Chamas": 2, "Arco": 2, "Besta": 2, "Arco Composto": 2, "Balestra": 2, "Proteção Leve": 2, "Escudo": 2, "Proteção Pesada": 5
}



# Dicionário de modificações para armas corpo a corpo
modificacoes_corpo_a_corpo = {
    "Certeira": {"custo": 50, "descricao": "+2 em testes de ataque."},
    "Cruel": {"custo": 75, "descricao": "+2 em rolagens de dano."},
    "Discreta": {"custo": 40, "descricao": "+5 em testes para ser ocultada e reduz o espaço em –1."},
    "Perigosa": {"custo": 55, "descricao": "+2 em margem de ameaça."},
    "Tática": {"custo": 40, "descricao": "Pode sacar como ação livre."}
}

# Dicionário de modificações para armas de fogo
modificacoes_fogo = {
    "Alongada": {"custo": 70, "descricao": "+2 em testes de ataque."},
    "Calibre Grosso": {"custo": 205, "descricao": "Aumenta o dano em mais um dado do mesmo tipo."},
    "Compensador": {"custo": 130, "descricao": "Anula penalidade por rajadas."},
    "Discreta": {"custo": 50, "descricao": "+5 em testes para ser ocultada e reduz o espaço em –1."},
    "Ferrolho Automático": {"custo": 70, "descricao": "A arma se torna automática."},
    "Mira Laser": {"custo": 125, "descricao": "+2 em margem de ameaça."},
    "Mira Telescópica": {"custo": 80, "descricao": "Aumenta alcance da arma e da habilidade Ataque Furtivo."},
    "Silenciador": {"custo": 65, "descricao": "Reduz em –10 a penalidade em Furtividade para se esconder após atacar."},
    "Tática": {"custo": 50, "descricao": "Pode sacar como ação livre."},
    "Visão de Calor": {"custo": 105, "descricao": "Ignora camuflagem."}
}


# Dicionário de maldições de armas
maldicao_armas = {
    "Antielemento": {"custo": 250, "descricao": "Gaste 2 PE Se fizer isso e acertar o ataque, causa +4d8 pontos de dano de algum elemento.", "Elemento": "Conhecimento"},
    "Ritualística": {"custo": 250, "descricao": "Você pode armazenar na arma um ritual, e usá-lo como ação livre ao atacar com a arma.", "Elemento": "Conhecimento"},
    "Senciente": {"custo": 250, "descricao": "Você pode gastar uma ação de movimento e 2 PE para sua arma flutuar e atacar voando.", "Elemento": "Conhecimento"},
    "Empuxo": {"custo": 250, "descricao": "Após efetuar um ataque à distância com a arma, ela volta voando para você no mesmo turno.", "Elemento": "Energia"},
    "Energética": {"custo": 250, "descricao": "Você pode gastar 2 PE por ataque para transformar a arma ou a munição em Energia pura.", "Elemento": "Energia"},
    "Vibrante": {"custo": 250, "descricao": "A arma vibra constantemente com um fluxo de Energia. Você recebe a habilidade Ataque Extra.", "Elemento": "Energia"},
    "Consumidora": {"custo": 250, "descricao": "Quando ataca, gaste 2 PE. Se fizer isso e acertar o ataque, o alvo fica imóvel por uma rodada", "Elemento": "Morte"},
    "Erosiva": {"custo": 250, "descricao": "Causa +1d8 de Morte. Pode gastar 2 PE a vítima sofre 2d4 de Morte no início do turno pelas próximas 2 rodadas.", "Elemento": "Morte"},
    "Repulsora": {"custo": 250, "descricao": "Fornece +2 de Defesa. Quando você faz um bloqueio, gaste 2 PE recebe um bônus de +5 em Defesa.", "Elemento": "Morte"},
    "Lancinante": {"custo": 250, "descricao": "Causr +1d8 de Sangue, Este dado é multiplicado em acertos críticos", "Elemento": "Sangue"},
    "Predadora": {"custo": 250, "descricao": "Anula penalidades por camuflagem e cobertura, Além disso, a margem de ameaça da arma duplica.", "Elemento": "Sangue"},
    "Sanguinária": {"custo": 250, "descricao": "Aplica sangrando. Sangramento causado pela arma é cumulativo. faz um acerto crítico concede a você 2d10 pontos de vida temporários.", "Elemento": "Sangue"},
}

# Dicionário de maldições de proteções
maldicao_protecoes = {
    "Abascanta": {"custo": 250, "descricao": "+5 em testes de resistência contra rituais. Gaste uma reação e PE igual ao custo do ritual para refleti-lo de volta ao conjurador.", "Elemento": "Conhecimento"},
    "Profética": {"custo": 250, "descricao": "Concede vislumbres de um possível futuro imediato. Resistência a Conhecimento 10 e Gaste 2 PE para rolar novamente um teste de resistência.", "Elemento": "Conhecimento"},
    "Sombria": {"custo": 250, "descricao": "+5 em Furtividade e ignora a penalidade de carga em pericias. Gaste ação de movimento e 1 PE para adquirir a aparência de uma roupa comum.", "Elemento": "Conhecimento"},
    "Cinética": {"custo": 250, "descricao": "Produz uma barreira invisível, concede +2 em Defesa e resistência a dano 2 (para proteção leve ou escudo) ou 5 (para proteção pesada).", "Elemento": "Energia"},
    "Lépida": {"custo": 250, "descricao": "+10 em testes de Atletismo e +3m de deslocamento. Você pode gastar 2 PE para se mover de forma sobrenatural. ", "Elemento": "Energia"},
    "Voltaica": {"custo": 250, "descricao": "Resistência a Energia 10 e gaste uma ação de movimento e 2 PE para emitir arcos de Energia, causa 2d6 pontos de dano de Energia em seres adjacentes.", "Elemento": "Energia"},
    "Letárgica": {"custo": 250, "descricao": "+2 em Defesa. Recebe 25% de chance (proteção leve ou escudo) e 50% de chance (pesada) de ignorar o dano extra de acertos críticos e ataques furtivos.", "Elemento": "Morte"},
    "Repulsiva": {"custo": 250, "descricao": "Resistência a Morte 10 e gaste uma ação de movimento e 2 PE para cobrir seu corpo com uma camada de Lodo preto que ao ser atacado corpo a corpo revida 2d8 pontos de dano de Morte.", "Elemento": "Morte"},
    "Regenerativa": {"custo": 250, "descricao": "Você recebe resistência a Sangue 10 e pode gastar uma ação de movimento e 1 PE para recuperar 1d12 pontos de vida.", "Elemento": "Sangue"},
    "Sádica": {"custo": 250, "descricao": "Recebe +1 em testes de ataque e rolagens de dano para cada 10 pontos de dano que sofreu desde o fim de seu último turno.", "Elemento": "Sangue"},
}

# Dicionário de maldições de acessórios
maldicao_acessorios = {
    "Carisma": {"custo": 250, "descricao": "Gera uma aura que torna você mais carismático e autoconfiante. Recebe +1 em Presença.", "Elemento": "Conhecimento"},
    "Conjuração": {"custo": 250, "descricao": "Tem um ritual de 1º círculo. Permite conjurar o ritual como se o conhecesse. Se conhecer, custo -1 PE.", "Elemento": "Conhecimento"},
    "Escudo Mental": {"custo": 250, "descricao": "Gera uma barreira psíquica. Recebe resistência mental 10.", "Elemento": "Conhecimento"},
    "Reflexão": {"custo": 250, "descricao": "Uma vez por rodada, ao ser alvo de um ritual, pode gastar PE igual ao custo para refletir o ritual de volta ao conjurador.", "Elemento": "Conhecimento"},
    "Sagacidade": {"custo": 250, "descricao": "Acelera sua mente com forças do Conhecimento, fornecendo +1 em Intelecto.", "Elemento": "Conhecimento"},
    "Defesa": {"custo": 250, "descricao": "Gera uma barreira de energia invisível, fornecendo +5 de Defesa.", "Elemento": "Energia"},
    "Destreza": {"custo": 250, "descricao": "Aprimora sua coordenação e velocidade, fornecendo +1 em Agilidade.", "Elemento": "Energia"},
    "Potência": {"custo": 250, "descricao": "Aumenta a DT contra suas habilidades, poderes e rituais em +1.", "Elemento": "Energia"},
    "Esforço Adicional": {"custo": 250, "descricao": "Fornece +5 PE, ativando após um dia de uso.", "Elemento": "Morte"},
    "Disposição": {"custo": 250, "descricao": "Usa o poder do Sangue para fornecer +1 em Vigor.", "Elemento": "Sangue"},
    "Pujança": {"custo": 250, "descricao": "Aumenta sua potência muscular, fornecendo +1 em Força.", "Elemento": "Sangue"},
    "Vitalidade": {"custo": 250, "descricao": "Fornece +15 PV, ativando após um dia de uso.", "Elemento": "Sangue"},
    "Proteção Elemental": {"custo": 250, "descricao": "Fornece resistência 10 contra um elemento. Conta como um item do elemento contra o qual fornece resistência.", "Elemento": "Varia"}
}


# Dicionário de modificações para armas de disparo (mesmas que as armas corpo a corpo)
modificacoes_disparo = modificacoes_corpo_a_corpo.copy()

# Dicionário de patentes e limites por categoria
patentes = {
    0: [40, 2, 0, 0, 0],
    1: [40, 3, 1, 0, 0],
    2: [40, 3, 2, 1, 0],
    3: [40, 3, 3, 2, 1],
    4: [40, 3, 3, 3, 2]
}

# Nomes das patentes
patente_nomes = {
    0: "Recruta",
    1: "Operador",
    2: "Agente Especial",
    3: "Oficial de Operações",
    4: "Agente de Elite"
}

import os

# Função para limpar a tela
def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')

# Função para obter entrada válida para dinheiro
def obter_dinheiro():
    while True:
        try:
            dinheiro_usuario = float(input("Digite quanto dinheiro você tem: "))
            if dinheiro_usuario >= 0:
                return dinheiro_usuario
            else:
                print("O valor do dinheiro deve ser positivo.")
        except ValueError:
            print("Entrada inválida. Por favor, digite um valor numérico.")

# Função para obter entrada válida para patente
def obter_patente():
    while True:
        try:
            limpar_tela()
            print("Patentes: \n0 - Recruta \n1 - Operador \n2 - Agente Especial \n3 - Oficial de Operações \n4 - Agente de Elite")
            patente_numero = int(input("Digite o número da sua patente: "))
            if patente_numero in patente_nomes:
                return patente_numero
            else:
                print(f"Valor incorreto. Digite um número entre 0 e {len(patente_nomes) - 1}.")
        except ValueError:
            print("Entrada inválida. Por favor, digite um número.")

# Função para exibir os limites de itens por categoria da patente
def exibir_limites_patente(patente_numero):
    limites = patentes[patente_numero][1:]
    categorias = ["Categoria 1", "Categoria 2", "Categoria 3", "Categoria 4"]
    print(f"\nLimites da patente {patente_nomes[patente_numero]}:")
    for i, limite in enumerate(limites):
        print(f"- Você tem um limite de {limite} Itens de {categorias[i]}")

# Função para obter entrada válida para todos os atributos
def obter_status():
    while True:
        try:
            limpar_tela()
            forca_usuario = int(input("Digite sua força (0 para cima): "))
            if forca_usuario < 0:
              print("O valor da força deve ser 0 ou maior.")
              input("\nPressione Enter para continuar...")
            else:
              while True:
                agilidade_usuario = int(input("\nDigite sua agilidade (0 para cima): "))
                if agilidade_usuario < 0:
                  print("O valor da agilidade deve ser 0 ou maior.")
                  input("\nPressione Enter para continuar...")
                else:
                  while True:
                    intelecto_usuario = int(input("\nDigite sua intelecto (0 para cima): "))
                    if intelecto_usuario < 0:
                      print("O valor da intelecto deve ser 0 ou maior.")
                      input("\nPressione Enter para continuar...")
                    else:
                      while True:
                        presenca_usuario = int(input("\nDigite sua presenca (0 para cima): "))
                        if presenca_usuario < 0:
                          print("O valor da presenca deve ser 0 ou maior.")
                          input("\nPressione Enter para continuar...")
                        else:
                          while True:
                            vigor_usuario = int(input("\nDigite seu vigor (0 para cima): "))
                            if vigor_usuario < 0:
                              print("O valor do vigor deve ser 0 ou maior.")
                              input("\nPressione Enter para continuar...")
                            else:
                              return forca_usuario, agilidade_usuario, intelecto_usuario, presenca_usuario, vigor_usuario
                          continue
                      continue
                  continue
              continue
            continue
        except ValueError:
            print("\nEntrada inválida. Por favor, digite um número.")
            input("Pressione Enter para continuar...")


# Função para obter entrada válida da origem
def obter_origem():
    nome = "None"
    while True:
        try:
            limpar_tela()
            for i in range(len(origens)):
                print(f"{i}: {origens[i]}")

            origem_usuario = int(input("Digite o número da sua origem: "))
            print(f"Origem selecionada: {origens[origem_usuario]}")
            if origem_usuario == 9:
              while True:
                try:
                  limpar_tela()
                  todos_itens = obter_lista_todas_acessorios()
                  for idx, (nome, preco, categoria, tipo) in enumerate(todos_itens):
                    print(f"{idx}: {nome} (Categoria: {categoria})")
                  ito = int(input("Escolha um item para contar como 1 categoria abaixo (escreva o número que refere-se ao item): \n"))
                  nome, preco, categoria, tipo = todos_itens[ito]
                  if todos_itens[ito] in todos_itens:
                    print(f"{nome} selecionado(a).")
                    input("Pressione Enter para continuar...")
                    break
                  else:
                    print("Item inválido. Digite um item válido.")
                    continue
                except IndexError:
                  print("Entrada inválida. Por favor, digite um número válido.")
                  input("Pressione Enter para continuar...")
                except ValueError:
                  print("Entrada inválida. Por favor, digite um número válido.")
                  input("Pressione Enter para continuar...")
            break
        except ValueError:
          print("Digite uma origem válida")
    return origem_usuario, nome

# Função para obter entrada válida para NEX e Trilha
def obter_nex(intelecto_usuario):
  while True:
      try:
          limpar_tela()
          print("Classes: \n1 - Combatente \n2 - Especialista \n3 - Ocultista")
          classe_usuario = int(input("Digite o Index da sua Classe: "))
          if classe_usuario == 1 or classe_usuario == 2 or classe_usuario == 3:
              break
          else:
              print("Número inválida. Digite um index válido.")
              continue
      except ValueError:
          print("Entrada inválida. Por favor, digite um valor válida.")

  while True:
      try:
          limpar_tela()
          nex_usuario = int(input("Digite o seu NEX (5% a 99%)(subindo de 5 em 5): "))
          # Verifica se o valor está no intervalo permitido e é múltiplo de 5, ou se é igual a 99
          if (nex_usuario >= 5 and nex_usuario <= 95 and nex_usuario % 5 == 0) or nex_usuario == 99:
              break
          else:
              print("Valor de NEX inválido. Digite um valor entre 5 e 99, subindo de 5 em 5, ou 99.")
              continue
      except ValueError:
            print("Entrada inválida. Por favor, digite um valor inteiro referente ao seu nex (50% = 50).")

  aniqui = 1
  espaco = 0
  nome = "None"
  trilha_usuario = None
  while True:
      try:
          if nex_usuario >= 10:
            if classe_usuario == 1:
              print("Classes: \n1 - Aniquilador \n2 - Comadante de Campo \n3 - Guerreiro \n4 - Operações Especiais \n5- Tropa de Choque")
              trilha_usuario = int(input("Escolha a sua Trilha: "))
              if trilha_usuario == 1 or trilha_usuario == 2 or trilha_usuario == 3 or trilha_usuario == 4 or trilha_usuario == 5:
                print("Trilha Selecionada.")
                if trilha_usuario == 1:
                  while True:
                    limpar_tela()
                    todos_itens = obter_lista_todas_armas2()
                    for idx, (nome, preco, categoria, tipo) in enumerate(todos_itens):
                      print(f"{idx}: {nome} (Categoria: {categoria})")
                    it = int(input("Qual arma você deseja reduzir a categoria? (Digite o número que se refere ao item)\n"))
                    nome, preco, categoria, tipo = todos_itens[it]
                    if todos_itens[it] in todos_itens:
                      print(f"{nome} selecionado(a).")
                      if nex_usuario == 99:
                        aniqui = 3
                      elif nex_usuario >= 40:
                        aniqui = 2
                      else:
                        aniqui = 1
                      break
                    else:
                      print("Item inválido. Digite um item válido.")
                      continue
              else:
                print("Trilha inválida. Digite uma trilha válida.")
                continue
            elif classe_usuario == 2:
              print("Classes: \n1 - Atirador de Elite \n2 - Infiltrador \n3 - Médico de Campo \n4 - Negociador \n5 - Técnico")
              trilha_usuario = int(input("Escolha a sua Trilha: "))
              if trilha_usuario == 1 or trilha_usuario == 2 or trilha_usuario == 3 or trilha_usuario == 4 or trilha_usuario == 5:
                print("Trilha Selecionada.")
                if trilha_usuario == 5:
                  espaco = 5 * intelecto_usuario
              else:
                print("Trilha inválida. Digite uma trilha válida.")
                continue
            elif classe_usuario == 3:
              print("Classes: \n1 - Conduíte \n2 - Flagelador \n3 - Graduado \n4 - Intuitivo \n5 - Lâmina Paranormal")
              trilha_usuario = int(input("Escolha a sua Trilha: "))
              if trilha_usuario == 1 or trilha_usuario == 2 or trilha_usuario == 3 or trilha_usuario == 4 or trilha_usuario == 5:
                print("Trilha Selecionada.")
              else:
                print("Trilha inválida. Digite uma trilha válida.")
                continue
          if nex_usuario >= 15:
            if classe_usuario == 2:
              while True:
                limpar_tela()
                h1 = str(input("Você escolhe o poder de classe 'Mochila de Utilidades' ? (S/N)"))
                if h1.lower() == "s":
                  print("Você escolheu a Mochila de Utilidades.")
                  while True:
                    limpar_tela()
                    todos_itens = obter_lista_todas_acessorios()
                    for idx, (nome, preco, categoria, tipo) in enumerate(todos_itens):
                      print(f"{idx}: {nome} (Categoria: {categoria})")
                    it = int(input("Qual item (exceto armas) você deseja que conte com 1 categoria e espaço a menos? (Digite o número que se refere ao item)\n"))
                    nome, preco, categoria, tipo = todos_itens[it]
                    if todos_itens[it] in todos_itens:
                      print(f"{nome} selecionado(a).")
                      break
                    else:
                      print("Item inválido. Digite um item válido.")
                      continue
                elif h1.lower() == "n":
                  print("Você não escolheu a Mochila de Utilidades.")
                  break
                elif h1.lower() != "s" and h1.lower() != "n":
                  print("Resposta inválida. Digite 'S' para sim ou 'N' para não.")
                  continue
                break
            elif classe_usuario == 3:
              while True:
                limpar_tela()
                h1 = str(input("Você escolhe o poder de classe 'Ferramentas Paranormais' ? (S/N)"))
                if h1.lower() == "n":
                  print("Você não escolheu as Ferramentas Paranormais.")
                  break
                elif h1.lower() == "s":
                  print("Você escolheu as Ferramentas Paranormais.")
                  while True:
                      limpar_tela()
                      todos_pitens = obter_lista_todos_itens_paranormal()
                      for idx, (nome, preco, categoria) in enumerate(todos_pitens):
                        print(f"{idx}: {nome} (Categoria: {categoria})")
                      itp = int(input("Qual item paranormal você deseja que conte com 1 categoria a menos e usar sem gastar PE? (Digite o número que se refere ao item)\n"))
                      nome, preco, categoria = todos_pitens[itp]
                      if todos_pitens[itp] in todos_pitens:
                        print(f"{nome} selecionado(a).")
                        break
                      else:
                        print("Item inválido. Digite um item válido.")
                        continue
                  break
                elif h1.lower() != "s" and h1.lower() != "n":
                  print("Resposta inválida. Digite 'S' para sim ou 'N' para não.")
                  continue
          break
      except ValueError:
        print("Entrada inválida. Por favor, digite um valor válido.")
  return nex_usuario, classe_usuario, trilha_usuario, aniqui, espaco, nome

# Função para obter a lista de todas as armas com tipo, preço e categoria base
def obter_lista_todas_armas():
    todas_armas = []
    for categoria, armas in armas_corpo_a_corpo.items():
        for nome, preco in armas.items():
            todas_armas.append((nome, preco, categoria, "Corpo a Corpo"))
    for categoria, armas in armas_fogo.items():
        for nome, preco in armas.items():
            todas_armas.append((nome, preco, categoria, "Fogo"))
    for categoria, armas in armas_disparo.items():
        for nome, preco in armas.items():
            todas_armas.append((nome, preco, categoria, "Disparo"))
    for categoria, protecoes in protecao.items():
        for nome, preco in protecoes.items():
            todas_armas.append((nome, preco, categoria, "Proteção"))
    return todas_armas

def obter_lista_todas_armas2():
    todas_armas = []
    for categoria, armas in armas_corpo_a_corpo.items():
        for nome, preco in armas.items():
            todas_armas.append((nome, preco, categoria, "Corpo a Corpo"))
    for categoria, armas in armas_fogo.items():
        for nome, preco in armas.items():
            todas_armas.append((nome, preco, categoria, "Fogo"))
    for categoria, armas in armas_disparo.items():
        for nome, preco in armas.items():
            todas_armas.append((nome, preco, categoria, "Disparo"))
    return todas_armas

# Função para obter a lista de todas as proteções com tipo, preço e categoria base
def obter_lista_todas_protecoes():
    todas_protecoes = []
    for categoria, protecoes in protecao.items():
        for nome, preco in protecoes.items():
            todas_protecoes.append((nome, preco, categoria))
    return todas_protecoes

# Função para obter a lista de todas os acessorios, explosivos e acessorios com tipo, preço e categoria base
def obter_lista_todas_acessorios():
    todas_acessorios = []
    for categoria, acessorios in acessorio.items():
        for nome, preco in acessorios.items():
            todas_acessorios.append((nome, preco, categoria, "Acessório"))
    for categoria, explosivos in explosivo.items():
        for nome, preco in explosivos.items():
            todas_acessorios.append((nome, preco, categoria, "Explosivo"))
    for categoria, itens in itens_operacionais.items():
        for nome, preco in itens.items():
            todas_acessorios.append((nome, preco, categoria, "Item Operacional"))
    for categoria, itens in itens_paranormal.items():
        for nome, preco in itens.items():
            todas_acessorios.append((nome, preco, categoria, "Paranormal"))
    return todas_acessorios

# Função para obter a lista de todas os itens amaldiçoados especiais com tipo, preço e categoria base
def obter_lista_todas_itens_amaldicoados():
    todas_itens_amaldicoados = []
    for categoria, itens in itens_amaldicoados_sangue.items():
        for nome, preco in itens.items():
            todas_itens_amaldicoados.append((nome, preco, categoria, "Sangue"))
    for categoria, itens in itens_amaldicoados_morte.items():
        for nome, preco in itens.items():
            todas_itens_amaldicoados.append((nome, preco, categoria, "Morte"))
    for categoria, itens in itens_amaldicoados_conhecimento.items():
        for nome, preco in itens.items():
            todas_itens_amaldicoados.append((nome, preco, categoria, "Conhecimento"))
    for categoria, itens in itens_amaldicoados_energia.items():
        for nome, preco in itens.items():
            todas_itens_amaldicoados.append((nome, preco, categoria, "Energia"))
    for categoria, itens in itens_amaldicoados_varia.items():
        for nome, preco in itens.items():
            todas_itens_amaldicoados.append((nome, preco, categoria, "Varia"))
    for categoria, itens in itens_amaldicoados_medo.items():
        for nome, preco in itens.items():
            todas_itens_amaldicoados.append((nome, preco, categoria, "Medo"))
    return todas_itens_amaldicoados


def obter_lista_todos_itens_paranormal():
    todos_itens_paranormal = []
    for categoria, itens in itens_paranormal.items():
        for nome, preco in itens.items():
            todos_itens_paranormal.append((nome, preco, categoria))
    return todos_itens_paranormal

# Função para calcular a categoria base da arma
def categoria_base_arma(arma):
    if arma in armas_corpo_a_corpo[0] or arma in acessorio[0] or arma in armas_disparo[0] or arma in explosivo[0] or arma in itens_operacionais[0] or arma in itens_paranormal[0]:
        return 0
    elif arma in armas_corpo_a_corpo[1] or arma in acessorio[1] or arma in armas_fogo[1] or arma in armas_disparo[1] or arma in protecao[1] or arma in explosivo[1] or arma in itens_operacionais[1]:
        return 1
    elif arma in armas_fogo[2] or arma in itens_paranormal[2] or arma in protecao[2] or arma in itens_operacionais[2] or arma in itens_amaldicoados_sangue[0] or arma in itens_amaldicoados_morte[0] or arma in itens_amaldicoados_conhecimento[0] or arma in itens_amaldicoados_energia[0] or arma in itens_amaldicoados_varia[0]:
        return 2
    elif arma in armas_fogo[3]:
        return 3
    elif arma in itens_amaldicoados_medo[1]:
        return 4

# Função para comprar armas
def comprar_armas(patente_numero, dinheiro_usuario, forca_usuario, mochilas_usuario, espaco, armas_escolhidas, espaco_total):
    limite_por_categoria = patentes[patente_numero]
    max_espaco_normal = min(20,2 + mochilas_usuario + espaco) if forca_usuario == 0 else min(20, forca_usuario * 5 + mochilas_usuario + espaco)
    max_espaco_interno = max_espaco_normal * 2  # Limite interno é o dobro do limite normal

    todas_armas = obter_lista_todas_armas()

    while True:
        limpar_tela()
        print("Lista de todas as armas disponíveis:")
        for idx, (nome, preco, categoria, tipo) in enumerate(todas_armas):
            peso = pesos_armas[nome]
            print(f"{idx}: {nome} ({tipo}) - {preco} créditos, Peso: {peso} (Categoria: {categoria})")

        print(f"Saldo atual: {dinheiro_usuario} créditos")
        print(f"Espaço total disponível: {espaco_total}/{max_espaco_normal}")

        entrada = input(f"Digite o número da arma (ex: 15) ou pressione Enter para sair: ")
        if entrada.lower() == '':
            break
        quant = input(f"Digite a quantidade que deseja comprar (ex: 2): ")

        try:
            num_arma = entrada
            quantidade = quant
            num_arma = int(num_arma)
            quantidade = int(quantidade)
            nome, preco, categoria, tipo = todas_armas[num_arma]
            peso = pesos_armas[nome]

            # Verifica se a quantidade excede o limite permitido para esta categoria
            quantidade_atual = sum(len(instancias) for instancias in armas_escolhidas[categoria].values())
            if quantidade_atual + quantidade > limite_por_categoria[categoria]:
                print("Quantidade excede o limite permitido para esta categoria.")
                input("Pressione Enter para continuar...")
                continue

            if dinheiro_usuario < preco * quantidade:
                print("Dinheiro insuficiente.")
                input("Pressione Enter para continuar...")
                continue

            if espaco_total + peso * quantidade > max_espaco_interno:
                print("Espaço insuficiente.")
                input("Pressione Enter para continuar...")
                continue

            for _ in range(quantidade):
                if nome in armas_escolhidas[categoria]:
                    armas_escolhidas[categoria][nome].append({})
                else:
                    armas_escolhidas[categoria][nome] = [{}]

            dinheiro_usuario -= preco * quantidade
            espaco_total += peso * quantidade
            print(f"Comprou {quantidade}x {nome}. Saldo atual: {dinheiro_usuario} créditos.")
            input("Pressione Enter para continuar...")

        except (ValueError, IndexError):
            print("Entrada inválida. Tente novamente.")
            input("Pressione Enter para continuar...")

    return armas_escolhidas, espaco_total, dinheiro_usuario

# Função para comprar equipamento geral
def comprar_acessorios(patente_numero, dinheiro_usuario, forca_usuario, mochilas_usuario, espaco, armas_escolhidas, espaco_total, nome1, nome2):
    limite_por_categoria = patentes[patente_numero]
    max_espaco_normal = min(20,2 + mochilas_usuario + espaco) if forca_usuario == 0 else min(20, forca_usuario * 5 + mochilas_usuario + espaco)
    max_espaco_interno = max_espaco_normal * 2  # Limite interno é o dobro do limite normal
    a = 0

    todos_itens = obter_lista_todas_acessorios()

    while True:
        limpar_tela()
        print("Lista de todos os itens disponíveis:")
        for idx, (nome, preco, categoria, tipo) in enumerate(todos_itens):
            peso = pesos_itens[nome]
            print(f"{idx}: {nome} ({tipo}) - {preco} créditos, Peso: {peso} (Categoria: {categoria})")

        print(f"Saldo atual: {dinheiro_usuario} créditos")
        print(f"Espaço total disponível: {espaco_total}/{max_espaco_normal}")

        entrada = input(f"Digite o número do item (ex: 15) ou pressione Enter para sair: ")
        if entrada.lower() == '':
            break
        quant = input(f"Digite a quantidade que deseja comprar (ex: 2): ")


        try:
            num_arma = entrada
            quantidade = quant
            num_arma = int(num_arma)
            quantidade = int(quantidade)
            nome, preco, categoria, tipo = todos_itens[num_arma]
            peso = pesos_itens[nome]

            # Verifica se a quantidade excede o limite permitido para esta categoria
            quantidade_atual = sum(len(instancias) for instancias in armas_escolhidas[categoria].values())
            if quantidade_atual + quantidade > limite_por_categoria[categoria]:
                if nome != nome1 and nome != nome2 :
                  print("Quantidade excede o limite permitido para esta categoria.")
                  input("Pressione Enter para continuar...")
                  continue
                else:
                  if a == 0:
                    a = 1
                    pass
                  else:
                    print("Quantidade excede o limite permitido para esta categoria.")
                    input("Pressione Enter para continuar...")
                    continue
            if dinheiro_usuario < preco * quantidade:
                print("Dinheiro insuficiente.")
                input("Pressione Enter para continuar...")
                continue

            if espaco_total + peso * quantidade > max_espaco_interno:
                print("Espaço insuficiente.")
                input("Pressione Enter para continuar...")
                continue

            for _ in range(quantidade):
                if nome in armas_escolhidas[categoria]:
                    armas_escolhidas[categoria][nome].append({})
                else:
                    armas_escolhidas[categoria][nome] = [{}]

            dinheiro_usuario -= preco * quantidade
            espaco_total += peso * quantidade
            print(f"Comprou {quantidade}x {nome}. Saldo atual: {dinheiro_usuario} créditos.")
            if nome.lower() == "mochila militar" or entrada == 29:
              for _ in range(quantidade):
                mochilas_usuario = mochilas_usuario + 2
              max_espaco_normal = min(20,2 + mochilas_usuario + espaco) if forca_usuario == 0 else min(20, forca_usuario * 5 + mochilas_usuario + espaco)
              max_espaco_interno = max_espaco_normal * 2
            input("Pressione Enter para continuar...")

        except (ValueError, IndexError):
            print("Entrada inválida. Tente novamente.")
            input("Pressione Enter para continuar...")

    return armas_escolhidas, espaco_total, dinheiro_usuario, mochilas_usuario

# Função para comprar itens amaldiçoados especiais
def comprar_itens_amaldicoados(patente_numero, dinheiro_usuario, forca_usuario, mochilas_usuario, espaco, armas_escolhidas, espaco_total):
    limite_por_categoria = patentes[patente_numero]
    max_espaco_normal = min(20,2 + mochilas_usuario + espaco) if forca_usuario == 0 else min(20, forca_usuario * 5 + mochilas_usuario + espaco)
    max_espaco_interno = max_espaco_normal * 2  # Limite interno é o dobro do limite normal

    todos_i_amaldicoados = obter_lista_todas_itens_amaldicoados()

    while True:
        limpar_tela()
        print("Lista de todas os itens amaldiçoados disponíveis:")
        for idx, (nome, preco, categoria, tipo) in enumerate(todos_i_amaldicoados):
            peso = pesos_itens_amaldicoados[nome]
            print(f"{idx}: {nome} ({tipo}) - {preco} créditos, Peso: {peso} (Categoria: {categoria})")

        print(f"Saldo atual: {dinheiro_usuario} créditos")
        print(f"Espaço total disponível: {espaco_total}/{max_espaco_normal}")

        entrada = input(f"Digite o número do item amaldiçoado (ex: 15) ou pressione Enter para sair: ")
        if entrada.lower() == '':
            break
        quant = input(f"Digite a quantidade que deseja adquirir (ex: 2): ")

        try:
            num_arma = entrada
            quantidade = quant
            num_arma = int(num_arma)
            quantidade = int(quantidade)
            nome, preco, categoria, tipo = todos_i_amaldicoados[num_arma]
            peso = pesos_itens_amaldicoados[nome]

            # Verifica se a quantidade excede o limite permitido para esta categoria
            quantidade_atual = sum(len(instancias) for instancias in armas_escolhidas[categoria].values())
            if quantidade_atual + quantidade > limite_por_categoria[categoria]:
                print("Quantidade excede o limite permitido para esta categoria.")
                input("Pressione Enter para continuar...")
                continue

            if dinheiro_usuario < preco * quantidade:
                print("Dinheiro insuficiente.")
                input("Pressione Enter para continuar...")
                continue

            if espaco_total + peso * quantidade > max_espaco_interno:
                print("Espaço insuficiente.")
                input("Pressione Enter para continuar...")
                continue

            for _ in range(quantidade):
                if nome in armas_escolhidas[categoria]:
                    armas_escolhidas[categoria][nome].append({})
                else:
                    armas_escolhidas[categoria][nome] = [{}]

            dinheiro_usuario -= preco * quantidade
            espaco_total += peso * quantidade
            print(f"Comprou {quantidade}x {nome}. Saldo atual: {dinheiro_usuario} créditos.")
            input("Pressione Enter para continuar...")

        except (ValueError, IndexError):
            print("Entrada inválida. Tente novamente.")
            input("Pressione Enter para continuar...")

    return armas_escolhidas, espaco_total, dinheiro_usuario

# Função para vender armas e reembolsar o usuário
def vender_armas(armas_compradas, dinheiro_usuario, forca_usuario, mochilas, espaco, espaco_total):
    todas_armas = obter_lista_todas_armas()
    todos_itens = obter_lista_todas_acessorios()
    todos_paranormal = obter_lista_todos_itens_paranormal()
    nome_arma_categoria = {(nome, categoria): preco for nome, preco, categoria, tipo in todas_armas}
    nome_item_categoria = {(nome, categoria): preco for nome, preco, categoria, tipo in todos_itens}
    nome_item_paranormal_categoria = {(nome, categoria): preco for nome, preco, categoria in todos_paranormal}
    espaco_total_normal = min(20, 2 + mochilas + espaco) if forca_usuario == 0 else min(20, forca_usuario * 5 + mochilas + espaco)

    while True:
        limpar_tela()
        print("Itens compradas:")
        for categoria, armas in armas_compradas.items():
            print(f"Categoria {categoria + 1}:")
            for arma, instancias in armas.items():
                print(f"  {arma} - Quantidade: {len(instancias)}")

        print(f"Saldo atual: {dinheiro_usuario} créditos")
        print(f"Espaço utilizado: {espaco_total}/{espaco_total_normal}")

        entrada = input("Digite o nome do item que deseja vender ou pressione Enter para sair: ")
        if entrada.lower() == '':
            break

        arma_selecionada = None
        for categoria, armas in armas_compradas.items():
            if entrada in armas and len(armas[entrada]) > 0:
                arma_selecionada = (categoria, entrada)
                break

        if arma_selecionada is None:
            print("Item não encontrado ou quantidade insuficiente. Tente novamente.")
            input("Pressione Enter para continuar...")
            continue

        categoria, nome_arma = arma_selecionada

        while True:
            limpar_tela()
            preco_venda = 0
            if (nome_arma, categoria) in nome_arma_categoria:
                preco_venda = nome_arma_categoria.get((nome_arma, categoria), 0)
            elif (nome_arma, categoria) in nome_item_categoria:
                preco_venda = nome_item_categoria.get((nome_arma, categoria), 0)
            elif (nome_arma, categoria) in nome_item_paranormal_categoria:
                preco_venda = nome_item_paranormal_categoria.get((nome_arma, categoria), 0)

            print(f"Preço de venda por unidade de {nome_arma}: {preco_venda} créditos")
            print(f"Quantidade disponível para venda: {len(armas_compradas[categoria][nome_arma])}")

            entrada_quant = input("Digite a quantidade que deseja vender ou pressione Enter para sair: ")
            if entrada_quant.lower() == '':
                break

            try:
                quantidade_venda = int(entrada_quant)
                if quantidade_venda > len(armas_compradas[categoria][nome_arma]):
                    print("Quantidade insuficiente. Tente novamente.")
                    input("Pressione Enter para continuar...")
                    continue

                peso_arma = pesos_armas[nome_arma]
                for _ in range(quantidade_venda):
                    if armas_compradas[categoria][nome_arma]:
                        armas_compradas[categoria][nome_arma].pop()

                if len(armas_compradas[categoria][nome_arma]) == 0:
                    del armas_compradas[categoria][nome_arma]

                dinheiro_usuario += preco_venda * quantidade_venda
                espaco_total -= peso_arma * quantidade_venda
                print(f"Vendeu {quantidade_venda}x {nome_arma}. Saldo atual: {dinheiro_usuario} créditos.")
                input("Pressione Enter para continuar...")
                break

            except ValueError:
                print("Entrada inválida. Tente novamente.")
                input("Pressione Enter para continuar...")

    return armas_compradas, dinheiro_usuario, espaco_total

from ast import Pass
# Função para comprar modificações
def comprar_modificacoes(patente_numero, armas_compradas, dinheiro_usuario, espaco_total, nome1, nome2, aniqui, a, b, f):
    while True:
        x = input("Você deseja adicionar modificações? (S/N): ")
        if x.lower() not in ['s', 'n']:
            print("Entrada inválida. Tente novamente.")
            continue
        elif x.lower() == 's':
            break
        else:
            return dinheiro_usuario

    if f == 0:
        modificacoes_escolhidas = {arma: [[] for _ in instancias] for categoria in armas_compradas.values() for arma, instancias in categoria.items()}
        f = f + 1

    limite_por_categoria = patentes[patente_numero]

    # Listar armas disponíveis
    print("Armas disponíveis para modificações:")
    for categoria, armas in armas_compradas.items():
        print(f"Categoria {categoria}:")
        for arma, instancias in armas.items():
            print(f"  {arma} - Quantidade: {len(instancias)}")

    arma_selecionada = input("Digite o nome da arma que deseja modificar ou pressione Enter para sair: ")
    if arma_selecionada == "":
        return dinheiro_usuario

    # Verificar se a arma está disponível
    arma_encontrada = False
    for categoria, armas in armas_compradas.items():
        if arma_selecionada in armas and len(armas[arma_selecionada]) > 0:
            arma_encontrada = True
            break

    if not arma_encontrada:
        print("Arma não encontrada ou quantidade insuficiente. Tente novamente.")
        input("Pressione Enter para continuar...")
        return dinheiro_usuario

    # Processar modificações para a arma selecionada
    for categoria, armas in armas_compradas.items():
        if arma_selecionada in armas:
            for i in range(len(armas[arma_selecionada])):
                while True:
                    print(f"\nQuantas modificações você deseja aplicar em {arma_selecionada} (arma {i + 1})?")
                    try:
                        num_modificacoes = int(input())
                        if num_modificacoes < 0:
                            print("Número de modificações deve ser positivo.")
                            continue
                        break
                    except ValueError:
                        print("Entrada inválida. Por favor, digite um número.")

                # Verificação de limite
                nova_categoria = categoria_base_arma(arma_selecionada) + num_modificacoes
                if nova_categoria > limite_por_categoria[categoria]:
                    print("Número de modificações excede o limite permitido pela patente.")
                    input("Pressione Enter para continuar...")
                    continue

                # Aplicar modificações
                for _ in range(num_modificacoes):
                    # Código para aplicar a modificação aqui
                    pass  # Substituir pelo código de modificação

    return dinheiro_usuario, espaco_total



# Função para comprar maldições
def comprar_maldicao(patente_numero, armas_compradas, dinheiro_usuario, nome1, nome2, aniqui, a, b, g):
    if input("Você deseja adicionar maldições? (S/N): ").lower() != 's':
        return dinheiro_usuario

    if g == 0:
        maldicao_escolhidas = {arma: [[] for _ in instancias] for categoria in armas_compradas.values() for arma, instancias in categoria.items()}
        g = g + 1
    limite_por_categoria = patentes[patente_numero]

    # Listar armas disponíveis
    print("Armas disponíveis para maldições:")
    for categoria, armas in armas_compradas.items():
        print(f"Categoria {categoria}:")
        for arma, instancias in armas.items():
            print(f"  {arma} - Quantidade: {len(instancias)}")

    arma_selecionada = input("Digite o nome da arma que deseja adicionar maldição ou pressione Enter para sair: ")
    if arma_selecionada == "":
        return dinheiro_usuario

    # Verificar se a arma está disponível
    arma_encontrada = False
    for categoria, armas in armas_compradas.items():
        if arma_selecionada in armas and len(armas[arma_selecionada]) > 0:
            arma_encontrada = True
            break

    if not arma_encontrada:
        print("Arma não encontrada ou quantidade insuficiente. Tente novamente.")
        input("Pressione Enter para continuar...")
        return dinheiro_usuario

    for categoria, armas in armas_compradas.items():
        if arma_selecionada in armas:
            for i in range(len(armas[arma_selecionada])):
                while True:
                    print(f"\nQuantas maldições você deseja aplicar em {arma_selecionada} (arma {i + 1})?")
                    try:
                        num_maldicoes = int(input())
                        if num_maldicoes < 0:
                            print("Número de maldições deve ser positivo.")
                            continue
                        break
                    except ValueError:
                        print("Entrada inválida. Por favor, digite um número.")

                # Verificação de limite
                nova_categoria = categoria_base_arma(arma_selecionada) + (num_maldicoes + 1)  # Aumenta 2 na primeira maldição
                if nova_categoria > limite_por_categoria[categoria]:
                    print("Número de maldições excede o limite permitido pela patente.")
                    input("Pressione Enter para continuar...")
                    continue

                # Aplicar maldições
                for _ in range(num_maldicoes):
                    # Código para aplicar a maldição aqui
                    pass  # Substituir pelo código de maldição

    return dinheiro_usuario

# Função para exibir o inventário
def exibir_inventario(armas_compradas, espaco_total, forca_usuario, mochilas, espaco, dinheiro_restante, nome1, nome2, aniqui):
    limpar_tela()
    max_espaco_normal = min(20, 2 + forca_usuario + mochilas + espaco) if forca_usuario == 0 else min(20, forca_usuario * 5 + mochilas + espaco)
    max_espaco_interno = max_espaco_normal * 2
    print(f"\nDinheiro restante após a compra: {dinheiro_restante}")
    print(f"Espaço total utilizado: {espaco_total} / {max_espaco_normal}")

    if espaco_total > max_espaco_normal:
        print("Aviso: Você está sobrecarregado!")

    print("\nInventário:")
    for categoria, armas in armas_compradas.items():
        for arma, instancias in armas.items():
            for i, instancia in enumerate(instancias):
                num_modificacoes = len(instancia.get("modificacoes", []))
                num_maldicoes = len(instancia.get("maldicao", []))
                if num_maldicoes > 0 :
                    num_maldicoes = num_maldicoes + 1
                else:
                    num_maldicoes = num_maldicoes
                total_modificacoes_maldicoes = num_modificacoes + num_maldicoes
                categoria_base_atual = categoria_base_arma(arma) + total_modificacoes_maldicoes
                modificacoes_str = ", ".join(instancia.get("modificacoes", [])) if num_modificacoes > 0 else "Nenhuma"
                maldicoes_str = ", ".join(instancia.get("maldicao", [])) if num_maldicoes > 0 else "Nenhuma"
                if arma in pesos_armas:
                    peso = pesos_armas[arma]
                elif arma in pesos_itens:
                    peso = pesos_itens[arma]
                elif arma in pesos_itens_amaldicoados:
                    peso = pesos_itens_amaldicoados[arma]
                if arma == nome1:
                    categoria_base_atual = categoria_base_atual - 1
                if arma == nome2:
                    categoria_base_atual = categoria_base_atual - aniqui
                if categoria_base_atual < 0:
                    categoria_base_atual = 0
                print(f"{arma} (Categoria: {categoria_base_atual}) (Peso: {peso}) (Modificações: {modificacoes_str}) (Maldições: {maldicoes_str})")

    input("\nPressione Enter para sair...")  # Pausa no final

def main():
    print("Bem-vindo a Loja de Ordem Paranormal!")
    while True:
        limpar_tela()
        forca_usuario, agilidade_usuario, intelecto_usuario, presenca_usuario, vigor_usuario = obter_status()
        dinheiro_usuario = obter_dinheiro()
        origem_usuario, nome1 = obter_origem()
        patente_numero = obter_patente()
        exibir_limites_patente(patente_numero)
        input("Pressione Enter para continuar...")
        nex_usuario, classe_usuario, trilha_usuario, aniqui, espaco, nome2 = obter_nex(intelecto_usuario)
        armas_escolhidas = {0: {}, 1: {}, 2: {}, 3: {}, 4: {}}
        espaco_total = 0
        mochilas = 0
        f = 0
        a = 0
        b = 0
        g = 0
        print("Agora que você preencheu as informações básica, aproveite o nosso menu de compras!")
        while True:
          try:
            limpar_tela()
            print("\nMenu Principal:")
            print(f"Saldo Atual: {dinheiro_usuario}")
            print("1. Comprar Armas e Proteções")
            print("2. Comprar Acessórios, Explosivos e Itens")
            print("3. Comprar Itens Amaldiçoados")
            print("4. Adicionar Modificações")
            print("5. Adicionar Maldições")
            print("6. Exibir Inventário")
            print("7. Vender Itens")
            print("8. Mudar alguma informação")
            print("9. Sair")
            escolha = int(input("Escolha uma opção(Digite um Número): "))
            if escolha == 1:
                armas_escolhidas, espaco_total, dinheiro_usuario = comprar_armas(patente_numero, dinheiro_usuario, forca_usuario, mochilas, espaco, armas_escolhidas, espaco_total)
            elif escolha == 2:
                armas_escolhidas, espaco_total, dinheiro_usuario, mochilas = comprar_acessorios(patente_numero, dinheiro_usuario, forca_usuario, mochilas, espaco, armas_escolhidas, espaco_total, nome1, nome2)
            elif escolha == 3:
                armas_escolhidas, espaco_total, dinheiro_usuario = comprar_itens_amaldicoados(patente_numero, dinheiro_usuario, forca_usuario, mochilas, espaco, armas_escolhidas, espaco_total)
            elif escolha == 4:
                dinheiro_usuario, espaco_total = comprar_modificacoes(patente_numero, armas_escolhidas, dinheiro_usuario, espaco_total, nome1, nome2, aniqui, a, b, f)
                print(f"Dinheiro restante após a compra: {dinheiro_usuario}")
                input("Pressione Enter para continuar...")
            elif escolha == 5:
              if patente_numero > 1:
                dinheiro_usuario = comprar_maldicao(patente_numero, armas_escolhidas, dinheiro_usuario, nome1, nome2, aniqui, a, b, g)
                print(f"Dinheiro restante após a compra: {dinheiro_usuario}")
                input("Pressione Enter para continuar...")
              else:
                print("Você não possui patente suficientes para adicionar maldições.")
                input("Pressione Enter para continuar...")
            elif escolha == 6:
                exibir_inventario(armas_escolhidas, espaco_total, forca_usuario, mochilas, espaco, dinheiro_usuario, nome1, nome2, aniqui)
            elif escolha == 7:
              if armas_escolhidas != {0: {}, 1: {}, 2: {}, 3: {}, 4: {}}:
                armas_escolhidas, dinheiro_usuario, espaco_total = vender_armas(armas_escolhidas, dinheiro_usuario, forca_usuario, mochilas, espaco, espaco_total)
              else:
                print("Você não possui armas para vender.")
                input("Pressione Enter para continuar...")
            elif escolha == 8:
              print("\nMenu de Opções:")
              print("1. Atributos")
              print("2. Dinheiro")
              print("3. Origem")
              print("4. Patente")
              print("5. Nex, Classe e Trilha")
              print("6. Sair")
              escolha_inf = int(input("Escolha uma opção: "))
              if escolha_inf == 1:
                forca_usuario, agilidade_usuario, intelecto_usuario, presenca_usuario, vigor_usuario = obter_status()
                if classe_usuario == 2 and trilha_usuario == 5:
                  espaco = 5 * intelecto_usuario
              if escolha_inf == 2:
                dinheiro_usuario = obter_dinheiro()
              if escolha_inf == 3:
                origem_usuario, nome1 = obter_origem()
              if escolha_inf == 4:
                patente_numero = obter_patente()
                exibir_limites_patente(patente_numero)
              if escolha_inf == 5:
                nex_usuario, classe_usuario, trilha_usuario, aniqui, espaco, nome2 = obter_nex(intelecto_usuario)
              if escolha_inf == 6:
                continue
            elif escolha == 9:
              while True:
                print("Deseja Sair ou Criar um Novo Personagem?(S/C)")
                criar = input()
                if criar.lower() == 'c':
                    break
                elif criar.lower() == 's':
                    break
                else:
                    print("Opção inválida. Tente novamente.")
                    continue
              break
            else:
                print("Opção inválida. Tente novamente.")
                continue
          except ValueError:
            print("Entrada inválida. Tente novamente.")
            continue
        if criar.lower() == 's':
          break
        if criar.lower() == 'c':
          continue

main()